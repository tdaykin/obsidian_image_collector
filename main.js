/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageCollectorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  imageFolderPath: "zAttachments"
  // Default folder
};
var ImageCollectorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Image Collector Settings" });
    new import_obsidian.Setting(containerEl).setName("Image Folder Path").setDesc("The folder where images are stored").addText((text) => text.setPlaceholder("Enter your image folder path").setValue(this.plugin.settings.imageFolderPath).onChange(async (value) => {
      this.plugin.settings.imageFolderPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
var ImageCollectorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "export-markdown-images-command",
      name: "Export Markdown Images",
      callback: () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile && activeFile instanceof import_obsidian.TFile && activeFile.extension === "md") {
          this.exportMarkdownImages(activeFile);
        } else {
          new import_obsidian.Notice("No active markdown file.");
        }
      }
    });
    this.addSettingTab(new ImageCollectorSettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      if (file instanceof import_obsidian.TFile && file.extension === "md") {
        menu.addItem((item) => {
          item.setTitle("Export Images with My Plugin").setIcon("document-export").onClick(() => {
            this.exportMarkdownImages(file);
          });
        });
      }
    }));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async exportMarkdownImages(file) {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || activeFile.extension !== "md") {
      new import_obsidian.Notice("No active markdown file.");
      return;
    }
    const fileContent = await this.app.vault.read(activeFile);
    const imageRegex = /!\[\[?(.*?)\]?\]/g;
    let match;
    const images = [];
    while ((match = imageRegex.exec(fileContent)) !== null) {
      const imagePath = match[1].includes("|") ? match[1].split("|")[0] : match[1];
      images.push(imagePath);
    }
    if (images.length === 0) {
      new import_obsidian.Notice("No images found in the markdown file.");
      return;
    }
    const targetFolderName = `${activeFile.basename} images`;
    await this.app.vault.createFolder(targetFolderName).catch(() => {
    });
    for (const imagePath of images) {
      const resolvedImagePath = this.resolveImagePath(activeFile, imagePath);
      const imageFile = this.app.vault.getAbstractFileByPath(resolvedImagePath);
      if (imageFile instanceof import_obsidian.TFile) {
        try {
          const imageContent = await this.app.vault.readBinary(imageFile);
          const targetPath = `${targetFolderName}/${imageFile.name}`;
          await this.app.vault.createBinary(targetPath, imageContent);
          new import_obsidian.Notice(`Exported ${imageFile.name} to ${targetPath}`);
        } catch (error) {
          new import_obsidian.Notice(`Failed to export image ${imageFile.name}: ${error}`);
          console.error(`Failed to export image ${imageFile.name}:`, error);
        }
      } else {
        new import_obsidian.Notice(`Image not found: ${resolvedImagePath}`);
        console.error(`Image not found: ${resolvedImagePath}`);
      }
    }
  }
  resolveImagePath(activeFile, imagePath) {
    let normalizedPath = imagePath.replace(/\[\[|\]\]/g, "");
    let basePath = this.settings.imageFolderPath;
    if (normalizedPath.startsWith("/") || normalizedPath.startsWith(`${basePath}/`)) {
      return normalizedPath;
    }
    if (activeFile.parent) {
      const folderPath = activeFile.parent.path;
      const fullPath = `${folderPath}/${normalizedPath}`;
      const fileExists = this.app.vault.getAbstractFileByPath(fullPath);
      if (fileExists) {
        return fullPath;
      }
    }
    return `${basePath}/${normalizedPath}`;
  }
};
